{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"leekslazylogger \u00b6 About \u00b6 leekslazylogger is an easy-to-use and lightweight Node.JS logger with colours & styles, log files, and timestamps. Features \u00b6 Some of the things that make leekslazylogger awesome: Highly customisable 8 default log levels and ability to add more or modify the defaults Extensions for popular frameworks (including express.js and fastify) Uses leeks.js (supports RGB and HEX) Short codes for fast inline colours and styles (like Minecraft!) Debug mode (ignores debug messages unless told not to) Custom timestamp formats Log files Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform Screenshots \u00b6 The default log levels \u00b6 An example of custom log level formats \u00b6 Getting Started \u00b6 For installation and usage instructions/examples, see Getting Started . Support \u00b6 Go to the docs , or ask for help in #general-support on Discord . Donate \u00b6","title":"leekslazylogger"},{"location":"#leekslazylogger","text":"","title":"leekslazylogger"},{"location":"#about","text":"leekslazylogger is an easy-to-use and lightweight Node.JS logger with colours & styles, log files, and timestamps.","title":"About"},{"location":"#features","text":"Some of the things that make leekslazylogger awesome: Highly customisable 8 default log levels and ability to add more or modify the defaults Extensions for popular frameworks (including express.js and fastify) Uses leeks.js (supports RGB and HEX) Short codes for fast inline colours and styles (like Minecraft!) Debug mode (ignores debug messages unless told not to) Custom timestamp formats Log files Automatically cleans-up old logs (optional) Strips colour if it's not supported in the environment Cross-platform","title":"Features"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#the-default-log-levels","text":"","title":"The default log levels"},{"location":"#an-example-of-custom-log-level-formats","text":"","title":"An example of custom log level formats"},{"location":"#getting-started","text":"For installation and usage instructions/examples, see Getting Started .","title":"Getting Started"},{"location":"#support","text":"Go to the docs , or ask for help in #general-support on Discord .","title":"Support"},{"location":"#donate","text":"","title":"Donate"},{"location":"colours-and-styles/","text":"Colours and styles \u00b6 To use colours (other than &codes) inline, you must import leeks.js (which you have already installed as it is one of the dependencies). Example Require leeks.js to use inline colours other than &codes: const leeks = require ( 'leeks.js' ); log . console ( leeks . colours . red ( 'red!' )); I recommend using &codes instead if you want to use inline colours. Using overrides: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); // only works for colour names and short codes, not RGB/HEX/8Bit where foregroundColour and backgroundColour are resolvable colours . Info If you give both a foreground and background colour, and the background colour given is the name or &code of a foreground colour, the background colour will be converted to an actual background colour. As RGB/HEX/8bit colours do not have specific foreground/background codes, if you wish to use an RGB/HEX/8bit colour for the background you must also give a foreground colour. Types of colours \u00b6 leeks.js / colour name \u00b6 A name of a colour (string or function). A full list of leeks.js colour names and style names can be found here . Override log . info ( 'some text' , [ 'blue' , 'black' ]); // or log . info ( 'some text' , [ 'blue' , 'bgBlack' ]); Inline log . info ( `this part is normal info colour ${ leeks . colours . red ( 'but this part is red' ) } , although this is also red :(` ); // better to use &codes for inline RGB \u00b6 A string of numbers separated by commas (with or without spaces). See leeks.js docs for inline usage. log . info ( 'some text' , [ '123, 123, 123' , '321, 321, 321' ]); HEX \u00b6 A string with a HEX code ( with hashtag). See leeks.js docs for inline usage. log . info ( 'some text' , [ '#AABBCC' , '#123456' ]); 8bit \u00b6 A number. You will get an error if you try to put the number in a string. See leeks.js docs for inline usage. log . info ( 'some text' , [ 16 , 1 ]); Short codes \u00b6 A string containing an &fg or &!bg short code for a leeks.js colour. All short codes are listed below . Don't put a space between codes and text when using them inline ( &cred not &c red ) as the space will show. Use Logger.f(String) or Logger.format(String) to use inline colours. Override log . info ( 'some text' , [ '&a' , '&0' ]); // or log . info ( 'some text' , [ '&a' , '&!0' ]); Inline log . info ( Logger . format ( `this is normal info colour, &athis is light green &3,and it\\'s easy to return to the normal colour` )); leeks.js short codes \u00b6 Foreground colours \u00b6 Code leeks.js &0 black &1 blue &2 green &3 cyan &4 red &5 magenta &6 yellow &7 blackBright &8 whiteBright &9 blueBright &a greenBright &b cyanBright &c redBright &d magentaBright &e yellowBright &f white &#... hex(...) Background colours \u00b6 Code leeks.js &!0 bgBlack &!1 bgBlue &!2 bgGreen &!3 bgCyan &!4 bgRed &!5 bgMagenta &!6 bgYellow &!7 bgBlackBright &!8 bgWhiteBright &!9 bgBlueBright &!a bgGreenBright &!b bgCyanBright &!c bgRedBright &!d bgMagentaBright &!e bgYellowBright &!f bgWhite &#!... hexBg(...) Styles \u00b6 Code leeks.js &i inverse &j dim &k blink &l bold &m strikethrough &n underline &o italic &p overline &r reset","title":"Colours and styles"},{"location":"colours-and-styles/#colours-and-styles","text":"To use colours (other than &codes) inline, you must import leeks.js (which you have already installed as it is one of the dependencies). Example Require leeks.js to use inline colours other than &codes: const leeks = require ( 'leeks.js' ); log . console ( leeks . colours . red ( 'red!' )); I recommend using &codes instead if you want to use inline colours. Using overrides: log . info ( text , [ foregroundColour ]); log . info ( text , [ foregroundColour , backgroundColour ]); log . info ( text , [ backgroundColour ]); // only works for colour names and short codes, not RGB/HEX/8Bit where foregroundColour and backgroundColour are resolvable colours . Info If you give both a foreground and background colour, and the background colour given is the name or &code of a foreground colour, the background colour will be converted to an actual background colour. As RGB/HEX/8bit colours do not have specific foreground/background codes, if you wish to use an RGB/HEX/8bit colour for the background you must also give a foreground colour.","title":"Colours and styles"},{"location":"colours-and-styles/#types-of-colours","text":"","title":"Types of colours"},{"location":"colours-and-styles/#leeksjs-colour-name","text":"A name of a colour (string or function). A full list of leeks.js colour names and style names can be found here . Override log . info ( 'some text' , [ 'blue' , 'black' ]); // or log . info ( 'some text' , [ 'blue' , 'bgBlack' ]); Inline log . info ( `this part is normal info colour ${ leeks . colours . red ( 'but this part is red' ) } , although this is also red :(` ); // better to use &codes for inline","title":"leeks.js / colour name"},{"location":"colours-and-styles/#rgb","text":"A string of numbers separated by commas (with or without spaces). See leeks.js docs for inline usage. log . info ( 'some text' , [ '123, 123, 123' , '321, 321, 321' ]);","title":"RGB"},{"location":"colours-and-styles/#hex","text":"A string with a HEX code ( with hashtag). See leeks.js docs for inline usage. log . info ( 'some text' , [ '#AABBCC' , '#123456' ]);","title":"HEX"},{"location":"colours-and-styles/#8bit","text":"A number. You will get an error if you try to put the number in a string. See leeks.js docs for inline usage. log . info ( 'some text' , [ 16 , 1 ]);","title":"8bit"},{"location":"colours-and-styles/#short-codes","text":"A string containing an &fg or &!bg short code for a leeks.js colour. All short codes are listed below . Don't put a space between codes and text when using them inline ( &cred not &c red ) as the space will show. Use Logger.f(String) or Logger.format(String) to use inline colours. Override log . info ( 'some text' , [ '&a' , '&0' ]); // or log . info ( 'some text' , [ '&a' , '&!0' ]); Inline log . info ( Logger . format ( `this is normal info colour, &athis is light green &3,and it\\'s easy to return to the normal colour` ));","title":"Short codes"},{"location":"colours-and-styles/#leeksjs-short-codes","text":"","title":"leeks.js short codes"},{"location":"colours-and-styles/#foreground-colours","text":"Code leeks.js &0 black &1 blue &2 green &3 cyan &4 red &5 magenta &6 yellow &7 blackBright &8 whiteBright &9 blueBright &a greenBright &b cyanBright &c redBright &d magentaBright &e yellowBright &f white &#... hex(...)","title":"Foreground colours"},{"location":"colours-and-styles/#background-colours","text":"Code leeks.js &!0 bgBlack &!1 bgBlue &!2 bgGreen &!3 bgCyan &!4 bgRed &!5 bgMagenta &!6 bgYellow &!7 bgBlackBright &!8 bgWhiteBright &!9 bgBlueBright &!a bgGreenBright &!b bgCyanBright &!c bgRedBright &!d bgMagentaBright &!e bgYellowBright &!f bgWhite &#!... hexBg(...)","title":"Background colours"},{"location":"colours-and-styles/#styles","text":"Code leeks.js &i inverse &j dim &k blink &l bold &m strikethrough &n underline &o italic &p overline &r reset","title":"Styles"},{"location":"customisation/","text":"Customisation \u00b6 See defaults.js for defaults. Logger options \u00b6 Types: { name? : String , timestamp? : String , logToFile? : Boolean , splitFile? : Boolean , header? : Boolean , maxAge? : Number , daily? : Boolean , keepSilent? : Boolean , debug? : Boolean , directory? : String , levels? : Object } name name \u00b6 The name of your program. Appears in log file headers. timestamp timestamp \u00b6 A dtf timestamp format. logToFile logToFile \u00b6 Create and use log files? splitFile splitFile \u00b6 Split log file into separate stdout and stderr files? header header \u00b6 Include the header in log files? maxAge maxAge \u00b6 The number of days to keep log files for. daily daily \u00b6 Create 1 file per day? Otherwise creates 1 file per run. keepSilent keepSilent \u00b6 Disable the logger's startup messages? debug debug \u00b6 If false, log levels with the type of debug are ignored. directory directory \u00b6 The logs directory path. levels levels \u00b6 Customise your logger's log levels . Log levels \u00b6 { type ?: String , format : String | Function } Use the levels option to override the defaults , or create new ones. Each level must have a format property which is either a string, or a function which returns a string. The format may contain short codes and the following placeholders: {timestamp} - The formatted timestamp string {text} - The text to be logged To use RGB, HEX, or 8Bit colours you need to import leeks.js . You don't need to install it as it a dependency of leekslazylogger. Each level can optionally have a type property: console[type](...) . Example const Logger = require ( 'leekslazylogger' ); const log = new Logger ({ levels : { db : { type : 'debug' , // optional format : '[{timestamp} | DEBUG] &7[DATABASE]&r {text}' } } }); log . db ( 'Some boring information about the database' ); More examples .","title":"Customisation"},{"location":"customisation/#customisation","text":"See defaults.js for defaults.","title":"Customisation"},{"location":"customisation/#logger-options","text":"Types: { name? : String , timestamp? : String , logToFile? : Boolean , splitFile? : Boolean , header? : Boolean , maxAge? : Number , daily? : Boolean , keepSilent? : Boolean , debug? : Boolean , directory? : String , levels? : Object } name","title":"Logger options"},{"location":"customisation/#name","text":"The name of your program. Appears in log file headers. timestamp","title":"name"},{"location":"customisation/#timestamp","text":"A dtf timestamp format. logToFile","title":"timestamp"},{"location":"customisation/#logtofile","text":"Create and use log files? splitFile","title":"logToFile"},{"location":"customisation/#splitfile","text":"Split log file into separate stdout and stderr files? header","title":"splitFile"},{"location":"customisation/#header","text":"Include the header in log files? maxAge","title":"header"},{"location":"customisation/#maxage","text":"The number of days to keep log files for. daily","title":"maxAge"},{"location":"customisation/#daily","text":"Create 1 file per day? Otherwise creates 1 file per run. keepSilent","title":"daily"},{"location":"customisation/#keepsilent","text":"Disable the logger's startup messages? debug","title":"keepSilent"},{"location":"customisation/#debug","text":"If false, log levels with the type of debug are ignored. directory","title":"debug"},{"location":"customisation/#directory","text":"The logs directory path. levels","title":"directory"},{"location":"customisation/#levels","text":"Customise your logger's log levels .","title":"levels"},{"location":"customisation/#log-levels","text":"{ type ?: String , format : String | Function } Use the levels option to override the defaults , or create new ones. Each level must have a format property which is either a string, or a function which returns a string. The format may contain short codes and the following placeholders: {timestamp} - The formatted timestamp string {text} - The text to be logged To use RGB, HEX, or 8Bit colours you need to import leeks.js . You don't need to install it as it a dependency of leekslazylogger. Each level can optionally have a type property: console[type](...) . Example const Logger = require ( 'leekslazylogger' ); const log = new Logger ({ levels : { db : { type : 'debug' , // optional format : '[{timestamp} | DEBUG] &7[DATABASE]&r {text}' } } }); log . db ( 'Some boring information about the database' ); More examples .","title":"Log levels"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Install with: pnpm pnpm add leekslazylogger npm npm i leekslazylogger yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); For options , see customisation . Basic usage \u00b6 Each log level can be used like this: log . < level > ( text [, colours [, ... extra ]]); text should be the string you want to log colours is an optional array of [foregroundColour, backgroundColour] extra are optional extras (like console.log('some %s text', 'awesome', {anObject: true}) ) Examples log . console ( 'Hello world' ); log . info ( 'Ready.' , [ 'magentaBright' ]); log . info ( Logger . format ( 'Status: &aonline' )); A list of the default log levels can be found here . See customisation for information about custom log levels. Colour overrides \u00b6 If you want to override the colours of a particular line you can do so like this: log . info ( 'useful information' , [ foreground , background ]); foreground and background should be a resolvable colour . Inline colours \u00b6 Use the Logger.format() function to colour text using short codes (\"&codes\") : log . console ( Logger . format ( '&2this is green &4and this is red' )); Tip You can use Logger.f() too.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Install with: pnpm pnpm add leekslazylogger npm npm i leekslazylogger yarn yarn add leekslazylogger And require it in your code: const Logger = require ( 'leekslazylogger' ); const log = new Logger ( options ); For options , see customisation .","title":"Installation"},{"location":"getting-started/#basic-usage","text":"Each log level can be used like this: log . < level > ( text [, colours [, ... extra ]]); text should be the string you want to log colours is an optional array of [foregroundColour, backgroundColour] extra are optional extras (like console.log('some %s text', 'awesome', {anObject: true}) ) Examples log . console ( 'Hello world' ); log . info ( 'Ready.' , [ 'magentaBright' ]); log . info ( Logger . format ( 'Status: &aonline' )); A list of the default log levels can be found here . See customisation for information about custom log levels.","title":"Basic usage"},{"location":"getting-started/#colour-overrides","text":"If you want to override the colours of a particular line you can do so like this: log . info ( 'useful information' , [ foreground , background ]); foreground and background should be a resolvable colour .","title":"Colour overrides"},{"location":"getting-started/#inline-colours","text":"Use the Logger.format() function to colour text using short codes (\"&codes\") : log . console ( Logger . format ( '&2this is green &4and this is red' )); Tip You can use Logger.f() too.","title":"Inline colours"},{"location":"log-levels/","text":"Default log levels \u00b6 These are the default levels. They can be overridden by passing options , which also allows adding more. _logger _logger \u00b6 The log level used by the logger for startup messages. Default format: [{timestamp} | LOGGER] {text} basic basic \u00b6 A basic format with just the timestamp and text. Default format: [{timestamp}] {text} console console \u00b6 The standard format for all your logging needs. Default format: [{timestamp} | INFO] {text} info info \u00b6 Add some colour to your informative log messages with this cyan-coloured format. Default format: &3[{timestamp} | INFO] {text} success success \u00b6 Celebrate success with this green-coloured format. Default format: &2[{timestamp} | INFO] {text} debug debug \u00b6 This log level uses console.debug , which is automatically suppressed unless the debug option is set to true . When you encounter a bug, spam your logs with this dark blue-coloured format. Default format: &1[{timestamp} | DEBUG] {text} notice notice \u00b6 Get the users attention with this black-on-yellow-coloured format which stands easily out. Default format: &0&!6[{timestamp} | NOTICE] {text} warn warn \u00b6 Display warnings with this yellow-coloured format. Default format: &6[{timestamp} | WARN] {text} error error \u00b6 Display errors with this scary red-coloured format. Default format: &4[{timestamp} | ERROR] {text}","title":"Default log levels"},{"location":"log-levels/#default-log-levels","text":"These are the default levels. They can be overridden by passing options , which also allows adding more. _logger","title":"Default log levels"},{"location":"log-levels/#_logger","text":"The log level used by the logger for startup messages. Default format: [{timestamp} | LOGGER] {text} basic","title":"_logger"},{"location":"log-levels/#basic","text":"A basic format with just the timestamp and text. Default format: [{timestamp}] {text} console","title":"basic"},{"location":"log-levels/#console","text":"The standard format for all your logging needs. Default format: [{timestamp} | INFO] {text} info","title":"console"},{"location":"log-levels/#info","text":"Add some colour to your informative log messages with this cyan-coloured format. Default format: &3[{timestamp} | INFO] {text} success","title":"info"},{"location":"log-levels/#success","text":"Celebrate success with this green-coloured format. Default format: &2[{timestamp} | INFO] {text} debug","title":"success"},{"location":"log-levels/#debug","text":"This log level uses console.debug , which is automatically suppressed unless the debug option is set to true . When you encounter a bug, spam your logs with this dark blue-coloured format. Default format: &1[{timestamp} | DEBUG] {text} notice","title":"debug"},{"location":"log-levels/#notice","text":"Get the users attention with this black-on-yellow-coloured format which stands easily out. Default format: &0&!6[{timestamp} | NOTICE] {text} warn","title":"notice"},{"location":"log-levels/#warn","text":"Display warnings with this yellow-coloured format. Default format: &6[{timestamp} | WARN] {text} error","title":"warn"},{"location":"log-levels/#error","text":"Display errors with this scary red-coloured format. Default format: &4[{timestamp} | ERROR] {text}","title":"error"},{"location":"extensions/","text":"Extensions \u00b6 Extensions are packages which are drop-in replacements for leekslazylogger. They extend the Logger class to provide additional functionality. Current extensions: Express.js middleware by eartharoid ( GitHub ) Fastify plugin by eartharoid ( GitHub )","title":"Extensions"},{"location":"extensions/#extensions","text":"Extensions are packages which are drop-in replacements for leekslazylogger. They extend the Logger class to provide additional functionality. Current extensions: Express.js middleware by eartharoid ( GitHub ) Fastify plugin by eartharoid ( GitHub )","title":"Extensions"},{"location":"extensions/express/","text":"Express middleware \u00b6 Installation \u00b6 npm i leekslazylogger-express Usage \u00b6 // set up logger with options const ExpressLogger = require ( 'leekslazylogger-express' ); const log = new ExpressLogger ({ name : 'My express server' , }); // require express const express = require ( 'express' ); const app = express (); // use logger middleware app . use ( log . express ()); ... // other middleware and router ... // start server app . listen ( 8080 ); The logger middleware must be one of the first middleware to be added, before the routing. Screenshot \u00b6 Options \u00b6 You can pass options to customise it: const ExpressLogger = require ( 'leekslazylogger-express' ); const log = new ExpressLogger ({ name : 'My express server' , levels : { http : { title : 'info' , prefix : 'http' } } }); app . use ( log . express ({ level : 'http' , format : '{method} {route} {status}' })); format \u00b6 The default format is: {status-colour}{status}&r {method} &7{path} {time-colour}({time}) The string can include colour codes . Must be a string, or a function (takes the req object) which returns a string. Using a function allows use of other data such as the request's IP: const requestIp = require ( 'request-ip' ); app . use ( requestIp . mw ()); app . use ( log . express ({ level : 'http' , format : req => ` ${ req . clientIp } {method} {route} {status}` })); Placeholders \u00b6 The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : express route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed level \u00b6 The logger level (function) to use. The default level is info ( log.info() ).","title":"Express middleware"},{"location":"extensions/express/#express-middleware","text":"","title":"Express middleware"},{"location":"extensions/express/#installation","text":"npm i leekslazylogger-express","title":"Installation"},{"location":"extensions/express/#usage","text":"// set up logger with options const ExpressLogger = require ( 'leekslazylogger-express' ); const log = new ExpressLogger ({ name : 'My express server' , }); // require express const express = require ( 'express' ); const app = express (); // use logger middleware app . use ( log . express ()); ... // other middleware and router ... // start server app . listen ( 8080 ); The logger middleware must be one of the first middleware to be added, before the routing.","title":"Usage"},{"location":"extensions/express/#screenshot","text":"","title":"Screenshot"},{"location":"extensions/express/#options","text":"You can pass options to customise it: const ExpressLogger = require ( 'leekslazylogger-express' ); const log = new ExpressLogger ({ name : 'My express server' , levels : { http : { title : 'info' , prefix : 'http' } } }); app . use ( log . express ({ level : 'http' , format : '{method} {route} {status}' }));","title":"Options"},{"location":"extensions/express/#format","text":"The default format is: {status-colour}{status}&r {method} &7{path} {time-colour}({time}) The string can include colour codes . Must be a string, or a function (takes the req object) which returns a string. Using a function allows use of other data such as the request's IP: const requestIp = require ( 'request-ip' ); app . use ( requestIp . mw ()); app . use ( log . express ({ level : 'http' , format : req => ` ${ req . clientIp } {method} {route} {status}` }));","title":"format"},{"location":"extensions/express/#placeholders","text":"The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : express route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed","title":"Placeholders"},{"location":"extensions/express/#level","text":"The logger level (function) to use. The default level is info ( log.info() ).","title":"level"},{"location":"extensions/fastify/","text":"Fastify plugin \u00b6 Installation \u00b6 npm i leekslazylogger-fastify Usage \u00b6 // set up logger with options const FastifyLogger = require ( 'leekslazylogger-fastify' ); const log = new FastifyLogger ({ name : 'My fastify server' , }); // require fastify const fastify = require ( 'fastify' ); const server = fastify (); // use logger plugin server . use ( log . fastify ()); ... // other plugins and router ... // start server server . listen ( 8080 ); The logger plugin must be one of the first plugins to be registered, before the routing. Screenshot \u00b6 Options \u00b6 You can pass options to customise it: const FastifyLogger = require ( 'leekslazylogger-fastify' ); const log = new FastifyLogger ({ name : 'My fastify server' , levels : { http : { title : 'info' , prefix : 'http' } } }); server . use ( log . fastify (), { level : 'http' , format : '{method} {route} {status}' }); format \u00b6 The default format is: {status-colour}{status}&r {method} &7{path} {time-colour}({time}) The string can include colour codes . Must be a string, or a function (takes the req object) which returns a string. Using a function allows use of other data such as the request's IP: const requestIp = require ( 'request-ip' ); server . use ( log . fastify (), { level : 'http' , format : req => ` ${ requestIp . getClientIp ( req ) } {method} {route} {status}` }); Placeholders \u00b6 The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : fastify route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed level \u00b6 The logger level (function) to use. The default level is info ( log.info() ).","title":"Fastify plugin"},{"location":"extensions/fastify/#fastify-plugin","text":"","title":"Fastify plugin"},{"location":"extensions/fastify/#installation","text":"npm i leekslazylogger-fastify","title":"Installation"},{"location":"extensions/fastify/#usage","text":"// set up logger with options const FastifyLogger = require ( 'leekslazylogger-fastify' ); const log = new FastifyLogger ({ name : 'My fastify server' , }); // require fastify const fastify = require ( 'fastify' ); const server = fastify (); // use logger plugin server . use ( log . fastify ()); ... // other plugins and router ... // start server server . listen ( 8080 ); The logger plugin must be one of the first plugins to be registered, before the routing.","title":"Usage"},{"location":"extensions/fastify/#screenshot","text":"","title":"Screenshot"},{"location":"extensions/fastify/#options","text":"You can pass options to customise it: const FastifyLogger = require ( 'leekslazylogger-fastify' ); const log = new FastifyLogger ({ name : 'My fastify server' , levels : { http : { title : 'info' , prefix : 'http' } } }); server . use ( log . fastify (), { level : 'http' , format : '{method} {route} {status}' });","title":"Options"},{"location":"extensions/fastify/#format","text":"The default format is: {status-colour}{status}&r {method} &7{path} {time-colour}({time}) The string can include colour codes . Must be a string, or a function (takes the req object) which returns a string. Using a function allows use of other data such as the request's IP: const requestIp = require ( 'request-ip' ); server . use ( log . fastify (), { level : 'http' , format : req => ` ${ requestIp . getClientIp ( req ) } {method} {route} {status}` });","title":"format"},{"location":"extensions/fastify/#placeholders","text":"The available placeholders for setting your own format are: {method} : GET/POST etc {protocol} : HTTP or HTTPS {route} : fastify route name (eg: /users/:id ) {path} : Full path (no query) {status-colour} / {status-color} : green/orange/blue/red colour code based on status code (to prefix status) {status} : status code (200, 301, 404 etc) {time-colour} / {time-color} : light green/yellow/red colour code based on time (to prefix time) {time} : time in ms for request to be completed","title":"Placeholders"},{"location":"extensions/fastify/#level","text":"The logger level (function) to use. The default level is info ( log.info() ).","title":"level"}]}